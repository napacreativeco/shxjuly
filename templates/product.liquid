{% assign add_to_cart = 'Add to cart' %}
{% assign sold_out = 'Sold Out' %}
{% assign unavailable = 'Unavailable' %}

<div class="single-product" itemscope itemtype="http://schema.org/Product">
  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}" />
  <meta itemprop="image" content="{{ product | image_url: width: 900 }}" />
  
  <form action="/cart/add" method="post" enctype="multipart/form-data">
    <div class="single-product-wrapper">

      <div class="left-side">

        <div class="swiper">
          <div class="swiper-wrapper">
            {% for image in product.media %}

              <div class="swiper-slide">
                <img src="{{ image | image_url: width: 1200 }}" alt="{{ image.alt | escape }}" />
              </div>

            {% endfor %}
          </div>

          <div class="swiper-controls">
            <div class="swiper-pagination"></div>
          </div>

        </div>

      </div>

      <div class="right-side">
        {%- assign product_form_id = 'product-form-' | append: product.id -%}

        <div class="product-title desktop">
          <h1>{{ product.vendor }} / {{ product.title }}</h1>
        </div>

        <div class="actions-header">

          <div class="price-holder">
            {{ product.selected_or_first_available_variant.price | money_without_trailing_zeros | remove: '$' }}
            <span style="text-transform: uppercase;">{{ shop.currency }}</span>
          </div>

          <div class="size-holder">
            <div class="size">
              {% render 'new--product-variant-radios' %}
            </div>

            <div class="color">
              {% render 'new--product-variant-radios' %}
            </div>
          </div>

          <div class="button-holder">
            <button type="submit" name="checkout">
              {{ 'ADD TO CART' | escape }}
            </button> 
          </div>

        </div>

        <div class="product-title mobile">
          <h1>{{ product.vendor }} / {{ product.title }}</h1>
        </div>

        <div class="product-description">
          <span class="description-title">{{ 'about' | escape }}</span>
          <p>{{ product.description }}</p>
        </div>

        <div class="size-chart">
          <details>
            <summary>
              <div class="size-chart-title">
                <h3>{{ settings.size_chart_title | default: 'size chart' }}</h3>
              </div>
            </summary>

            <div class="content">
              <table class="size-chart-table">
                <thead>
                  <tr>
                    <th class="legend">label:</th>
                    {% for option in product.options_with_values %}

                      {% case option.name %}
                        {% when 'Size' %}

                        {% for value in option.values %}
                          <th>{{ value }}</th>
                        {% endfor %}
                      {% endcase %}
                    {% endfor %}
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td class="legend">chest:</td>
                    {% for size in shop.metaobjects.size_chart.values %}
                      <td>{{ size.s_chest }}</td>
                    {% endfor %}
                    {% for size in shop.metaobjects.size_chart.values %}
                      <td>{{ size.m_chest }}</td>
                    {% endfor %}
                    {% for size in shop.metaobjects.size_chart.values %}
                      <td>{{ size.l_chest }}</td>
                    {% endfor %}
                    {% for size in shop.metaobjects.size_chart.values %}
                      <td>{{ size.xl_chest }}</td>
                    {% endfor %}
                  </tr>
                  <tr>
                    <td class="legend">waist:</td>
                    {% for size in shop.metaobjects.size_chart.values %}
                      <td>{{ size.s_waist }}</td>
                    {% endfor %}
                    {% for size in shop.metaobjects.size_chart.values %}
                      <td>{{ size.m_waist }}</td>
                    {% endfor %}
                    {% for size in shop.metaobjects.size_chart.values %}
                      <td>{{ size.l_waist }}</td>
                    {% endfor %}
                    {% for size in shop.metaobjects.size_chart.values %}
                      <td>{{ size.xl_waist }}</td>
                    {% endfor %}
                  </tr>
                  <tr>
                    <td class="legend">shoulder:</td>
                    {% for size in shop.metaobjects.size_chart.values %}
                      <td>{{ size.s_shoulder }}</td>
                    {% endfor %}
                    {% for size in shop.metaobjects.size_chart.values %}
                      <td>{{ size.m_shoulder }}</td>
                    {% endfor %}
                    {% for size in shop.metaobjects.size_chart.values %}
                      <td>{{ size.l_shoulder }}</td>
                    {% endfor %}
                    {% for size in shop.metaobjects.size_chart.values %}
                      <td>{{ size.xl_shoulder }}</td>
                    {% endfor %}
                  </tr>
                </tbody>

              </table>
            </div>

          </details>
        </div>

        {% render 'throne-product-pagination' %}

      </div>

    </div>
  </form>
</div>


  {% comment %}
  Swiper
  {% endcomment %}
  <script>
    const swiper = new Swiper('.swiper', {
      direction: 'horizontal',
      loop: true,
      pagination: {
        el: '.swiper-pagination',
        clickable: true
      }
    });
  </script>

<script>
  
var selectCallback = function(variant, selector) {

  if (variant) {
    
    // Swap image.
    if (variant.featured_image) {
      var newImage = variant.featured_image; // New image object.
      var mainImageDomEl = jQuery('.product-photo-container img')[0]; // DOM element of main image we need to swap.
      Shopify.Image.switchImage(newImage, mainImageDomEl, switchImage); // Define switchImage (the callback) in your theme's JavaScript file.
    }
    
    // Selected a valid variant that is available.
    if (variant.available) {
          
      // Enabling add to cart button.
      jQuery('#add').removeClass('disabled').prop('disabled', false).val({{ add_to_cart | json }});
    
      // If item is backordered yet can still be ordered, we'll show special message.
      if (variant.inventory_management && variant.inventory_quantity <= 0) {
        jQuery('#selected-variant').html({{ product.title | json }}{% unless hide_default_title %} + ' - ' + variant.title{% endunless %});
        jQuery('#backorder').removeClass("hidden");
      } else {
        jQuery('#backorder').addClass("hidden");
      }
      
    } else {
      // Variant is sold out.
      jQuery('#backorder').addClass('hidden');
      jQuery('#add').val({{ sold_out | json }}).addClass('disabled').prop('disabled', true);       
    }
    
    // Whether the variant is in stock or not, we can update the price and compare at price.
    if ( variant.compare_at_price > variant.price ) {
      jQuery('#product-price').html('<span class="product-price on-sale">'+ Shopify.formatMoney(variant.price, "{{ shop.money_format }}") +'</span>'+'&nbsp;<s class="product-compare-price">'+Shopify.formatMoney(variant.compare_at_price, "{{ shop.money_format }}")+ '</s>');
    } else {
      jQuery('#product-price').html('<span class="product-price">'+ Shopify.formatMoney(variant.price, "{{ shop.money_format }}") + '</span>' );
    }        

  } else {
    // variant doesn't exist.
    jQuery('#product-price').empty();
    jQuery('#backorder').addClass('hidden');
    jQuery('#add').val({{ unavailable | json }}).addClass('disabled').prop('disabled', true);
  }

};
  
jQuery(function($) {

  //new Shopify.OptionSelectors('product-select', { product: {{ product | json }}, onVariantSelected: selectCallback, enableHistoryState: true });
  new Shopify.OptionSelectors('product-select', { product: {{ product | json }}, onVariantSelected: selectCallback, enableHistoryState: true });
  
  // Add label if only one product option and it isn't 'Title'.
  {% if product.options.size == 1 and product.options.first != 'Title' %}
    $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first }}</label>');
  {% endif %}

});

Shopify.Image.preload({{ product.images | json }}, 'grande');
Shopify.Image.preload({{ product.images | json }}, '1024x1024');

</script>